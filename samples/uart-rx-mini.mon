# Script: UART RX Mini
# Group: UART
#
# Monitor script for UART RX Mini example (see RP2040 datasheet,
# Sect. 3.6.4. "UART RX").  To be executed on PIO 0, SM 0.

# Make a full reset of the emulator.
reset

# Configure Wrap.
wrap --pio=0 --sm=0 --wrap=3 --target=0

# Configure Side Set
side-set --pio=0 --sm=0 --count=0 --opt=false

# The code.

# .wrap_target
enter -a 0 -v 0x2020 # wait 0 pin 0
enter -a 1 -v 0xea27 # set x, 7 [10]
# bitloop:
enter -a 2 -v 0x4001 # in pins, 1
enter -a 3 -v 0x0642 # jmp x-- bitloop [6]
# .wrap

# Just for convience and verification, list the program that
# we just entered, as viewed by PIO 0, SM 0.
unassemble --pio=0 --sm=0 --address=0 --count=4

########
# Init program (analoguous to ws2812_program_init() in ws2812.pio.h as
# created by pioasm).
########

# Set consecutive pindirs, here just a single one.
gpio --pio=0 --gpio=0 --disable # set direction in

# Connect GPIO 0 with PIO 0
gpio --pio=0 --gpio=0 --init

# Configure side set base (for WAIT and IN).
side-set --pio=0 --sm=0 --base=0

# Configure in shift.
fifo --pio=0 --sm=0 --rx --shift-right
fifo --pio=0 --sm=0 --rx --auto=true    # auto push
fifo --pio=0 --sm=0 --rx --threshold=8

# Join FIFO RX
fifo --join --rx

# Configure Clock Divider, here as 1.0 (maximum speed).
# We choose maximum speed since we do not want to see gaps when
# tracing the code.
clock --pio=0 --sm=0 --divider=1.0

########
# Initialize SM (analoguous to function pio_sm_init() in Pico C SDK).
########

# Disable state machine 0 of PIO 0 while executing the following
# commands.
sm --pio=0 --sm=0 --enable=false

# Clear FIFOs.
fifo --pio=0 --sm=0 --clear

# Clear FIFO debug flags.
fifo --pio=0 --sm=0 --clear-tx-stall
fifo --pio=0 --sm=0 --clear-tx-over
fifo --pio=0 --sm=0 --clear-rx-under
fifo --pio=0 --sm=0 --clear-rx-stall

# Restart SM.
sm --pio=0 --sm=0 --restart

# Restart clock.
clock --pio=0 --sm=0 --restart

# Set instruction pointer (PC) to address 0.
registers --address=0

########
# End of SM initialization.
########

# Enable state machine 0 of PIO 0 to execute the program.
sm --pio=0 --sm=0 --enable=true

########
# End of program initialization.
# Next, we feed in example data.
########

# While running the PIO program by triggering cycles, insert now and
# then either:

gpio --gpio=0 --set

# or:

gpio --gpio=0 --clear

# after an appropriate amount of cycles to change GPIO 0 input, as
# appropriate for testing / emulating external data input to the
# UART RX Mini PIO program.

# Done.
quit
